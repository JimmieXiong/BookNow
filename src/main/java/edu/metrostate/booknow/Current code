package edu.metrostate.booknow.Controllers;

import edu.metrostate.booknow.Models.Restaurant;
import edu.metrostate.booknow.Services.RestaurantServices;
import edu.metrostate.booknow.Services.UserServices;
import edu.metrostate.booknow.Utils.AlertUtil;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.IntStream;

/**
 * The BookNowController handles the UI interaction logic for the restaurant booking system.
 * It interacts with various UI components such as labels, combo boxes, date pickers, and VBoxes.
 */

public class BookNowController {

    @FXML
    private Label lbl_welcome;
    @FXML
    private ComboBox<String> locationComboBox;
    @FXML
    private ComboBox<String> cb_cuisineType;
    @FXML
    private DatePicker checkInDate;
    @FXML
    private VBox restaurantVBox;
    @FXML
    private ComboBox<Integer> cb_adults;
    @FXML
    private ComboBox<Integer> cb_children;

    private final RestaurantServices restaurantServices;

    public BookNowController() {
        this.restaurantServices = new RestaurantServices();
    }

    @FXML
    public void initialize() {
        // Set welcome message for logged-in user
        lbl_welcome.setText("Welcome, " + UserServices.getCurrentUser().getUserName());

        // Populate the location and cuisine type combo boxes
        locationComboBox.getItems().addAll(restaurantServices.getCityNames());
        cb_cuisineType.getItems().addAll(restaurantServices.getCuisineTypes());

        // Populate the adults and children combo boxes
        cb_adults.setItems(FXCollections.observableArrayList(IntStream.rangeClosed(1, 99).boxed().toList()));
        cb_children.setItems(FXCollections.observableArrayList(IntStream.rangeClosed(0, 99).boxed().toList()));
    }

    @FXML
    public void onSearchButtonClick(ActionEvent event) {
        String selectedCity = locationComboBox.getSelectionModel().getSelectedItem();
        String selectedCuisineType = cb_cuisineType.getSelectionModel().getSelectedItem();
        LocalDate selectedDate = checkInDate.getValue();

        // validate, if invalid, an alert is shown and the method exits.
        if (!restaurantServices.isSearchCriteriaValid(selectedCity, selectedCuisineType, selectedDate)) {
            AlertUtil.showInfoAlert("Invalid Search Criteria", restaurantServices.getValidationMessage());
            return;
        }

        // If valid, available restaurants are queried and then displayed to the user.
        List<Restaurant> restaurants = restaurantServices.findAvailableRestaurants(selectedCity, selectedCuisineType, selectedDate);
        populateRestaurants(restaurants);
    }

    // Populate restaurants in the VBox
    private void populateRestaurants(List<Restaurant> restaurants) {
        restaurantVBox.getChildren().clear(); // Clear previous results

        if (restaurants.isEmpty()) {
            AlertUtil.showInfoAlert("No Availability", "No restaurants are available for the selected date and criteria. Please search again.");
        } else {
            for (Restaurant restaurant : restaurants) {
                addRestaurantToVBox(restaurant);
            }
        }
    }

    // Dynamically load restaurant data into VBox
    private void addRestaurantToVBox(Restaurant restaurant) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/edu/metrostate/booknow/RestaurantBox.fxml"));
            VBox restaurantBox = loader.load();

            // Set restaurant data in the RestaurantBoxController
            RestaurantBoxController controller = loader.getController();
            controller.setRestaurantData(restaurant);

            restaurantVBox.getChildren().add(restaurantBox);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
package edu.metrostate.booknow.Controllers;

import edu.metrostate.booknow.Services.UserServices;
import edu.metrostate.booknow.Utils.AlertUtil;
import edu.metrostate.booknow.Utils.SwitchSceneUtil;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.sql.SQLException;

/**
 * Controller class for handling the creation of new user accounts.
 */

public class CreateNewAccountController {
    @FXML
    private TextField usernameField;
    @FXML
    private PasswordField passwordField;
    @FXML
    private PasswordField confirmPasswordField;

    private final UserServices userService;
    private static final String loginViewPath = "/edu/metrostate/booknow/LoginView.fxml";

    public CreateNewAccountController() {
        this.userService = new UserServices();
    }

    public void onCreateAccountButton(ActionEvent event) {
        String username = usernameField.getText();
        String password = passwordField.getText();
        String confirmPassword = confirmPasswordField.getText();

        // Validate inputs and get the error message if any
        String validationMessage = userService.validateInput(username, password, confirmPassword);

        if (validationMessage != null) {
            // Show the specific validation error message(s)
            AlertUtil.showInfoAlert("Validation Error", validationMessage);
            return;
        }

        try {
            if (userService.createAccount(username, password)) {
                AlertUtil.showInfoAlert("Success", "Account created successfully!");
                SwitchSceneUtil.switchScene(getClass().getResource(loginViewPath), event);
            } else {
                AlertUtil.showErrorAlert("Username Error", "Username already exists!");
            }
        } catch (SQLException | IOException e) {
            AlertUtil.showErrorAlert("Account Error", "Failed to create account. Try again.");
        }
    }


    public void onLoginButton(ActionEvent event) throws IOException {
        SwitchSceneUtil.switchScene(getClass().getResource(loginViewPath), event);
    }
}
package edu.metrostate.booknow.Controllers;

import edu.metrostate.booknow.Services.UserServices;
import edu.metrostate.booknow.Utils.AlertUtil;
import edu.metrostate.booknow.Utils.SwitchSceneUtil;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;

import java.io.IOException;

/**
 * Controller class for handling login functionality in a JavaFX application.
 */

public class LoginController {

    private static final String bookNowViewPath = "/edu/metrostate/booknow/BookNowView.fxml";
    private static final String createAccountViewPath = "/edu/metrostate/booknow/CreateAccountView.fxml";

    @FXML
    private TextField usernameField;
    @FXML
    private PasswordField passwordField;

    private final UserServices userService;

    public LoginController() {
        userService = new UserServices();
    }

    public void onLoginButtonAction(ActionEvent event) {
        String username = usernameField.getText();
        String password = passwordField.getText();

        // Move field validation to UserServices
        if (userService.areLoginFieldsValid(username, password)) {
            if (userService.login(username, password)) {
                switchToBookNowScene(event);
            } else {
                AlertUtil.showErrorAlert("Login Failed", "Invalid username or password.");
            }
        } else {
            AlertUtil.showInfoAlert("Validation Error", "Both fields are required!");
        }
    }

    public void onCreateAccountButtonAction(ActionEvent event) throws IOException {
        SwitchSceneUtil.switchScene(getClass().getResource(createAccountViewPath), event);
    }

    private void switchToBookNowScene(ActionEvent event) {
        try {
            SwitchSceneUtil.switchScene(getClass().getResource(bookNowViewPath), event);
        } catch (IOException e) {
            AlertUtil.showErrorAlert("Error", e.getMessage());
        }
    }
}
package edu.metrostate.booknow.Controllers;

import edu.metrostate.booknow.Models.Restaurant;
import edu.metrostate.booknow.Services.RestaurantServices;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

/**
 * The RestaurantBoxController class is responsible for managing the UI components
 * that display information about a restaurant. It interacts with RestaurantServices
 * to set and display various restaurant details.
 */
public class RestaurantBoxController {

    @FXML
    private Label restaurantNameLabel;

    @FXML
    private Label ratingLabel;

    @FXML
    private Label restaurantLocationLabel;

    @FXML
    private Label restaurantDescriptionLabel;

    @FXML
    private ImageView restaurantImageView;

    private final RestaurantServices restaurantServices;

    public RestaurantBoxController() {
        this.restaurantServices = new RestaurantServices(); // Using Services to handle business logic
    }

    // Sets the restaurant data into the UI elements of the RestaurantBox
    public void setRestaurantData(Restaurant restaurant) {
        setLabels(restaurant);

        // Fetch and display the average rating
        String averageRating = restaurantServices.getAverageRating(restaurant.getRestaurantId());
        ratingLabel.setText("Rating: " + averageRating + "/5");

        // Load and display restaurant image
        displayRestaurantImage(restaurant.getImagePath(), restaurantImageView);
    }

    // set labels for restaurant details
    private void setLabels(Restaurant restaurant) {
        restaurantNameLabel.setText(restaurant.getName());
        restaurantLocationLabel.setText(restaurant.getCity());
        restaurantDescriptionLabel.setText(restaurant.getDescription());
    }

    // Method to load and display the restaurant image
    private void displayRestaurantImage(String imagePath, ImageView imageView) {
        if (imagePath == null || imagePath.isEmpty()) {
            System.err.println("Image path is null or empty");
            return;
        }

        try {
            Image restaurantImage = new Image(getClass().getResource("/" + imagePath).toExternalForm());
            imageView.setImage(restaurantImage);
        } catch (NullPointerException e) {
            System.err.println("Image not found: " + imagePath);
        }
    }

    @FXML
    public void reviewsButton() {
        // Logic for handling reviews
    }

    @FXML
    public void menuButton() {
        // Logic for handling menu
    }

    @FXML
    public void availabilityButton() {
        // Logic for handling availability
    }
}
package edu.metrostate.booknow.DAO;

import edu.metrostate.booknow.Models.Restaurant;
import edu.metrostate.booknow.Utils.DB_Connection_Util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * Data Access Object (DAO) class for accessing restaurant-related data from the database.
 */

public class RestaurantDAO {
    // fetch distinct cities and cuisine from the restaurants table
    private static final String FETCH_DISTINCT_CITY = "SELECT DISTINCT city FROM restaurants";
    private static final String FETCH_DISTINCT_CUISINE = "SELECT DISTINCT cuisine_type FROM restaurants";

    public List<String> fetchCityNames() {
        return fetchDistinctValues(FETCH_DISTINCT_CITY, "city");
    }

    public List<String> fetchCuisineTypes() {
        return fetchDistinctValues(FETCH_DISTINCT_CUISINE, "cuisine_type");
    }

    // fetch distinct values from a specific column in the database based on the provided query
    private List<String> fetchDistinctValues(String sql, String columnName) {
        // Hold distinct values
        List<String> distinctValues = new ArrayList<>();

        try (Connection conn = DB_Connection_Util.getConnection()) {
            // checks to ensure connection to database was successful
            assert conn != null;
            // Prepare the SQL statement and execute the query
            try (PreparedStatement stmt = conn.prepareStatement(sql);
                 ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    distinctValues.add(rs.getString(columnName));
                }
            }
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
        return distinctValues;
    }

    /**
     * Retrieves a list of restaurants that are available for reservation on a specified date,
     * filtered by city and cuisine type.
     *
     * @param city        the city where the restaurants are located
     * @param cuisineType the type of cuisine the restaurants offer
     * @param date        the date for which the restaurant availability is being checked
     * @return a list of restaurants that are available for reservation on the specified date
     */
    // Get restaurants available on the given date (checking availability for reservations)
    public List<Restaurant> getAvailableRestaurants(String city, String cuisineType, LocalDate date) {
        List<Restaurant> availableRestaurants = new ArrayList<>();
        String query = "SELECT r.* FROM restaurants r " +
                "LEFT JOIN reservations res ON r.restaurant_id = res.restaurant_id " +
                "AND res.reservation_date = ? " + // Bind the date in the LEFT JOIN
                "WHERE r.city = ? AND r.cuisine_type = ?";

        try (Connection conn = DB_Connection_Util.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setDate(1, java.sql.Date.valueOf(date)); // Convert LocalDate to SQL Date
            stmt.setString(2, city);
            stmt.setString(3, cuisineType);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Restaurant restaurant = new Restaurant();
                    restaurant.setRestaurantId(rs.getInt("restaurant_id"));
                    restaurant.setName(rs.getString("name"));
                    restaurant.setCity(rs.getString("city"));
                    restaurant.setCuisineType(rs.getString("cuisine_type"));
                    restaurant.setDescription(rs.getString("description"));
                    restaurant.setMenuPdf(rs.getString("menu_pdf"));
                    restaurant.setImagePath(rs.getString("image_path"));
                    availableRestaurants.add(restaurant);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return availableRestaurants;
    }


    public String getAverageRating(int restaurantId) {
        String averageRating = "N/A";
        // Add logic for calculating the average rating
        return averageRating;
    }
}
package edu.metrostate.booknow.DAO;

import edu.metrostate.booknow.Models.User;
import edu.metrostate.booknow.Utils.DB_Connection_Util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Data Access Object (DAO) class for managing user-related operations in the database.
 */

public class UserDAO {

    // Method to retrieve user by username
    public User getUserByUsername(String username) throws SQLException {
        String query = "SELECT * FROM users WHERE username = ?";

        try (Connection conn = DB_Connection_Util.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, username);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new User(
                            rs.getInt("user_id"),
                            rs.getString("username"),
                            rs.getString("password")  // Removed 'role'
                    );
                }
            }
        }
        return null; // Return null if user is not found
    }


    // handles db query in logging in
    public boolean login(String username, String password) throws SQLException {

        // SQL query to select user by username and password
        String query = "SELECT * FROM users WHERE username = ? AND password = ?";

        // Using try-with-resources to ensure the connection and statement are closed
        try (Connection conn = DB_Connection_Util.getConnection()) {
            assert conn != null;
            try (PreparedStatement stmt = conn.prepareStatement(query)) {

                // Set the parameters for the SQL query
                stmt.setString(1, username);
                stmt.setString(2, password);

                // Execute the query and get the result set
                try (ResultSet rs = stmt.executeQuery()) {
                    // Return true if a user is found (login successful), otherwise false
                    return rs.next();
                }
            }
        }
    }

    // Method to create a new account
    public boolean createAccount(String username, String password) throws SQLException {
        String query = "INSERT INTO users (username, password) VALUES (?, ?)";  // Removed 'role'

        try (Connection conn = DB_Connection_Util.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, username);
            stmt.setString(2, password);

            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0; // Return true if account creation is successful
        }
    }

    // Method to check if a user exists
    public boolean checkUserRecordExists(String username) throws SQLException {
        String query = "SELECT * FROM users WHERE username = ?";

        try (Connection conn = DB_Connection_Util.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, username);

            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next(); // Return true if user record exists
            }
        }
    }
}
package edu.metrostate.booknow.Models;

import javafx.scene.control.Button;

import java.time.LocalDate;

public class Reservation {

    private int reservationId;
    private int restaurantId;
    private String restaurantName;
    private LocalDate reservationDate;
    private String timeSlot;
    private String tableNumber;
    private Button actionButton;

    private User user;
    private Restaurant restaurant;
    private TimeSlot timeSlotReserved;
    private Table table;

    public Reservation(int reservationId, int restaurantId, String restaurantName, LocalDate reservationDate, String timeSlot, String tableNumber) {
        this.reservationId = reservationId;
        this.restaurantId = restaurantId;
        this.restaurantName = restaurantName;
        this.reservationDate = reservationDate;
        this.timeSlot = timeSlot;
        this.tableNumber = tableNumber;
    }

    public int getReservationId() {
        return reservationId;
    }

    public String getRestaurantName() {
        return restaurantName;
    }

    public LocalDate getReservationDate() {
        return reservationDate;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    public String getTableNumber() {
        return tableNumber;
    }

    public Table getTable() {
        return table;
    }

    public void setTable(Table table) {
        this.table = table;
    }

    public Button getActionButton() {
        return actionButton;
    }

    public int getRestaurantId() {
        return restaurantId;
    }

    public void setReservationId(int reservationId) {
        this.reservationId = reservationId;
    }

    public void setRestaurantId(int restaurantId) {
        this.restaurantId = restaurantId;
    }

    public void setRestaurantName(String restaurantName) {
        this.restaurantName = restaurantName;
    }

    public void setReservationDate(LocalDate reservationDate) {
        this.reservationDate = reservationDate;
    }

    public void setTimeSlot(String timeSlot) {
        this.timeSlot = timeSlot;
    }

    public void setTableNumber(String tableNumber) {
        this.tableNumber = tableNumber;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Restaurant getRestaurant() {
        return restaurant;
    }

    public void setRestaurant(Restaurant restaurant) {
        this.restaurant = restaurant;
    }

    public TimeSlot getTimeSlotReserved() {
        return timeSlotReserved;
    }

    public void setTimeSlotReserved(TimeSlot timeSlotReserved) {
        this.timeSlotReserved = timeSlotReserved;
    }

    public void setActionButton(Button actionButton) {
        this.actionButton = actionButton;
    }
}
package edu.metrostate.booknow.Models;

public class Restaurant {

    private int restaurantId;
    private String name;
    private String city;
    private String cuisineType;
    private String description;
    private String menuPdf;
    private String imagePath;
    private int maxGuests;

    public Restaurant() {
    }

    public Restaurant(int restaurantId, String name, String city, String cuisineType, String description, String menuPdf, String imagePath, int maxGuests) {
        this.restaurantId = restaurantId;
        this.name = name;
        this.city = city;
        this.cuisineType = cuisineType;
        this.description = description;
        this.menuPdf = menuPdf;
        this.imagePath = imagePath;
        this.maxGuests = maxGuests;
    }

    public int getRestaurantId() {
        return restaurantId;
    }

    public String getName() {
        return name;
    }

    public String getCity() {
        return city;
    }

    public String getCuisineType() {
        return cuisineType;
    }

    public String getDescription() {
        return description;
    }

    public String getMenuPdf() {
        return menuPdf;
    }

    public String getImagePath() {
        return imagePath;
    }

    public int getMaxGuests() {
        return maxGuests;
    }

    public void setRestaurantId(int restaurantId) {
        this.restaurantId = restaurantId;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public void setCuisineType(String cuisineType) {
        this.cuisineType = cuisineType;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public void setMenuPdf(String menuPdf) {
        this.menuPdf = menuPdf;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public void setMaxGuests(int maxGuests) {
        this.maxGuests = maxGuests;
    }
}
package edu.metrostate.booknow.Models;

import java.time.LocalDate;

public class Review {
    private int reviewId;
    private String username;
    private String restaurantName;
    private int rating;
    private String feedback;
    private LocalDate dateOfExperience;

    private User user;
    private Restaurant restaurant;
    private TimeSlot timeSlotReserved;
    private Reservation reservation;

    public Review(int reviewId, String username, String restaurantName, int rating, String feedback, LocalDate dateOfExperience) {
        this.reviewId = reviewId;
        this.username = username;
        this.restaurantName = restaurantName;
        this.rating = rating;
        this.feedback = feedback;
        this.dateOfExperience = dateOfExperience;
    }

    public int getReviewId() {
        return reviewId;
    }

    public String getUsername() {
        return username;
    }

    public String getRestaurantName() {
        return restaurantName;
    }

    public int getRating() {
        return rating;
    }

    public String getFeedback() {
        return feedback;
    }

    public LocalDate getDateOfExperience() {
        return dateOfExperience;
    }

    public void setReviewId(int reviewId) {
        this.reviewId = reviewId;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setRestaurantName(String restaurantName) {
        this.restaurantName = restaurantName;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }

    public void setFeedback(String feedback) {
        this.feedback = feedback;
    }

    public void setDateOfExperience(LocalDate dateOfExperience) {
        this.dateOfExperience = dateOfExperience;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Restaurant getRestaurant() {
        return restaurant;
    }

    public void setRestaurant(Restaurant restaurant) {
        this.restaurant = restaurant;
    }

    public TimeSlot getTimeSlotReserved() {
        return timeSlotReserved;
    }

    public void setTimeSlotReserved(TimeSlot timeSlotReserved) {
        this.timeSlotReserved = timeSlotReserved;
    }

    public Reservation getReservation() {
        return reservation;
    }

    public void setReservation(Reservation reservation) {
        this.reservation = reservation;
    }
}
package edu.metrostate.booknow.Models;

public class Table {
    private int tableId;
    private int restaurantId;
    private String tableNumber;
    private int numberOfSeats;
    private double bookingFee;
    private boolean isAvailable;

    private Restaurant restaurant;

    public Table() {
    }

    public Table(int tableId, int restaurantId, String tableNumber, int numberOfSeats, double bookingFee, boolean isAvailable) {
        this.tableId = tableId;
        this.restaurantId = restaurantId;
        this.tableNumber = tableNumber;
        this.numberOfSeats = numberOfSeats;
        this.bookingFee = bookingFee;
        this.isAvailable = isAvailable;
    }

    public int getTableId() {
        return tableId;
    }

    public void setTableId(int tableId) {
        this.tableId = tableId;
    }

    public int getRestaurantId() {
        return restaurantId;
    }

    public void setRestaurantId(int restaurantId) {
        this.restaurantId = restaurantId;
    }

    public String getTableNumber() {
        return tableNumber;
    }

    public void setTableNumber(String tableNumber) {
        this.tableNumber = tableNumber;
    }

    public int getNumberOfSeats() {
        return numberOfSeats;
    }

    public void setNumberOfSeats(int numberOfSeats) {
        this.numberOfSeats = numberOfSeats;
    }

    public double getBookingFee() {
        return bookingFee;
    }

    public void setBookingFee(double bookingFee) {
        this.bookingFee = bookingFee;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    public Restaurant getRestaurant() {
        return restaurant;
    }

    public void setRestaurant(Restaurant restaurant) {
        this.restaurant = restaurant;
    }
}
package edu.metrostate.booknow.Models;

public class TimeSlot {

    private int slotId;
    private String slotLabel;

    public TimeSlot() {
    }

    public TimeSlot(int slotId, String slotLabel) {
        this.slotId = slotId;
        this.slotLabel = slotLabel;
    }

    public int getSlotId() {
        return slotId;
    }

    public void setSlotId(int slotId) {
        this.slotId = slotId;
    }

    public String getSlotLabel() {
        return slotLabel;
    }

    public void setSlotLabel(String slotLabel) {
        this.slotLabel = slotLabel;
    }

    @Override
    public String toString() {
        return "TimeSlot [slotId=" + slotId + ", slotLabel=" + slotLabel + "]";
    }
}
package edu.metrostate.booknow.Models;

public class User {

    private final int userId;
    private String usernName;
    private String passWord;

    public User(int userId, String username, String password) {
        this.userId = userId;
        this.usernName = username;
        this.passWord = password;
    }

    public String getUserName() {
        return usernName;
    }
}
package edu.metrostate.booknow.Services;

import edu.metrostate.booknow.DAO.RestaurantDAO;
import edu.metrostate.booknow.Models.Restaurant;

import java.time.LocalDate;
import java.util.List;

/**
 * The RestaurantServices class provides various services related to restaurant management,
 * including fetching city names, cuisine types, validating search criteria, and finding available restaurants.
 */

public class RestaurantServices {

    private final RestaurantDAO restaurantDAO;
    private String validationMessage;

    public RestaurantServices() {
        this.restaurantDAO = new RestaurantDAO();
    }

    // Fetch city names from the DAO
    public List<String> getCityNames() {
        return restaurantDAO.fetchCityNames();
    }

    // Fetch cuisine types from the DAO
    public List<String> getCuisineTypes() {
        return restaurantDAO.fetchCuisineTypes();
    }

    // Business logic: Validates the search criteria before querying the DAO
    public boolean isSearchCriteriaValid(String city, String cuisineType, LocalDate date) {
        if (city == null) {
            validationMessage = "Please select a location.";
            return false;
        }
        if (cuisineType == null) {
            validationMessage = "Please select a cuisine type.";
            return false;
        }
        if (date == null) {
            validationMessage = "Please select a date.";
            return false;
        }
        if (date.isBefore(LocalDate.now())) {
            validationMessage = "Check-in date cannot be in the past.";
            return false;
        }
        return true;
    }

    public String getValidationMessage() {
        return validationMessage;
    }

    // Finds available restaurants by calling the DAO
    public List<Restaurant> findAvailableRestaurants(String city, String cuisineType, LocalDate date) {
        return restaurantDAO.getAvailableRestaurants(city, cuisineType, date);
    }

    public String getAverageRating(int restaurantId) {
        return restaurantDAO.getAverageRating(restaurantId);
    }
}
package edu.metrostate.booknow.Services;

import edu.metrostate.booknow.DAO.UserDAO;
import edu.metrostate.booknow.Models.User;

import java.sql.SQLException;

/**
 * Service class for managing user-related functionalities such as login, account creation, and input validation.
 */

public class UserServices {

    private final UserDAO userDAO;
    private static User currentUser;

    public UserServices() {
        this.userDAO = new UserDAO();
    }

    // Uses UserDAO.login() method to handle login logic
    public boolean login(String username, String password) {
        try {
            if (userDAO.login(username, password)) {
                currentUser = userDAO.getUserByUsername(username);
                return true; // Login successful
            } else {
                return false; // Login failed
            }
        } catch (SQLException e) {
            System.err.println(e.getMessage());
            return false; // Return false on failure
        }
    }

    // Method to validate login fields
    public boolean areLoginFieldsValid(String username, String password) {
        return !(username == null || username.isEmpty() || password == null || password.isEmpty());
    }

    // Handles account creation and returns true if account created successfully
    public boolean createAccount(String username, String password) throws SQLException {
        // Check if the username already exists
        if (userDAO.checkUserRecordExists(username)) {
            System.out.println("Username already exists.");
            return false; // Username already taken
        }
        return userDAO.createAccount(username, password);
    }

    // Retrieves the current logged-in user
    public static User getCurrentUser() {
        return currentUser;
    }

    // Logs out the current user
    public void logout() {
        // not implemented yet
        currentUser = null;
    }

    // Validates user input for account creation and provides specific error messages for multiple conditions
    public String validateInput(String username, String password, String confirmPassword) {
        StringBuilder errorMessage = new StringBuilder();

        // Check if username and confirm password are not empty but password is empty
        if (!username.isEmpty() && password.isEmpty() && !confirmPassword.isEmpty()) {
            errorMessage.append("Password cannot be empty!\n");
        } else {
            // Check if username is empty
            if (username.isEmpty()) {
                errorMessage.append("Username cannot be empty!\n");
            } else if (username.length() < 8) {
                errorMessage.append("Username must be at least 8 characters long!\n");
            }

            // Check if password is empty or too short
            if (password.isEmpty()) {
                errorMessage.append("Password cannot be empty!\n");
            } else if (password.length() < 8) {
                errorMessage.append("Password must be at least 8 characters long!\n");
            }

            // Check if confirm password is empty or doesn't match
            if (confirmPassword.isEmpty()) {
                errorMessage.append("Confirm password field cannot be empty!\n");
            } else if (!password.equals(confirmPassword)) {
                errorMessage.append("Password and confirm password do not match!\n");
            }
        }
        // If no errors, return null, otherwise return all errors
        return errorMessage.isEmpty() ? null : errorMessage.toString();
    }
}
package edu.metrostate.booknow.Utils;

import javafx.scene.control.Alert;

/**
 * Utility class for displaying different types of alert dialogs.
 */

public class AlertUtil {

    // Displays information alert dialog
    public static void showInfoAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Displays error alert dialog
    public static void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

}
package edu.metrostate.booknow.Utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 * Utility class to manage database connections for the application.
 * Provides a method to establish a connection to a predefined MySQL database.
 */

public class DB_Connection_Util {

    private static final String url = "jdbc:mysql://localhost:3306/booknow";
    private static final String user = "root";
    private static final String password = "root";

    // Utility method to establish database connection
    public static Connection getConnection() throws SQLException {
        try {
            return DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            System.err.println("Failed to connect to the database: " + e.getMessage());
        }
        return null;
    }
}
package edu.metrostate.booknow.Utils;

import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;

/**
 * Utility class for switching scenes in a JavaFX application.
 */

public class SwitchSceneUtil {

    // Switches the current scene to a new scene specified by the given URL
    public static void switchScene(URL url, ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(url);
        Parent parent = loader.load();

        // Get the current stage (window)
        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();

        // Store the current maximized state and window dimensions
        boolean isMaximized = window.isMaximized();
        double currentWidth = window.getWidth();
        double currentHeight = window.getHeight();

        // Create the new scene with the same dimensions
        Scene scene = new Scene(parent, currentWidth, currentHeight);
        window.setScene(scene);

        // Restore the previous maximized state or dimensions
        if (isMaximized) {
            window.setMaximized(true);
        } else {
            window.setWidth(currentWidth);
            window.setHeight(currentHeight);
        }

        // Show the updated window
        window.show();
    }
}
package edu.metrostate.booknow;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class BookNowApplication extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        FXMLLoader fxmlLoader = new FXMLLoader(BookNowApplication.class.getResource("LoginView.fxml"));
        Scene scene = new Scene(fxmlLoader.load(), 1200, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
